
@Transactional   only for DML  not for retriving data

@Entity = bean++

entityManager.merge()    entityManager.persist() 

public void xxx{
Person p - new Person("jain");
em.persist(p)
p.setName("sharad");
em.flush()
}

op will be sharad coz of @Transactional

coz all the process is done(we r in one transaction and in a transaction is managed by EntityManager, for all like delete add remove all) in same method so @Transactional is responsible for completly sucess or fail

EntityManager track a transaction and at the last will update the complete transaction.

public void xxx{

Person p - new Person("jain");
em.persist(p)
p.setName("sharad");

em.flush();/////   good practice coz after this line em will save the data in db whatever it has // means it flush the data in db// else in the last data will be saved// last means end of that transaction

Person p1 - new Person("Vimal");
em.persist(p1)
p1.setName("Pitaji");   op will be as above  but  if we write like below
}


Person p - new Person("jain");
em.persist(p)
em.detach(p)
p.setName("sharad");  now op will be only jain in db


we can use \\  

em.clear();  /// but this will clear everything whatever tracked by em
 ex

Person p - new Person("jain");
em.persist(p)

Person p1 - new Person("Vimal");
em.persist(p1)
 em.flush();
em.clear(); //  now em will be untracked anything

p.setName("sharad");
p1.setName("MyGod");  // these 2 line will have no effect


////em.refresh(EntityName)

ex     Person p - new Person("jain");
       em.persist(p)
   	 em.flush();

 	Person p1 - new Person("Vimal");
	em.persist(p1)
	 em.flush();

            p.satName("MOm");
            p1.satName("DAD");

                em.refresh(p);  
 		 em.flush();
  now in db the changes will be for p1 becaue we did  p.satName("DAD");
so what it will do ,  it will fetch data from db for Entity p and update with the same so  p.satName("MOm");  will have no effect



EntityManager  is a interface to PersistanceContext



















